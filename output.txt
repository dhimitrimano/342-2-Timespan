Sun Oct 25 12:12:43 PDT 2020
Linux csslab7.uwb.edu 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1091439(dhimitri) gid=2121091439(dhimitri) groups=2121091439(dhimitri),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
test1 complete
test2 complete
test3 complete
test4 complete
Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
11349 warnings generated.
22228 warnings generated.
Suppressed 22228 warnings (22228 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./timespan.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==23438== Memcheck, a memory error detector
==23438== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==23438== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==23438== Command: ./a.out
==23438== Parent PID: 23375
==23438== 
==23438== 
==23438== HEAP SUMMARY:
==23438==     in use at exit: 0 bytes in 0 blocks
==23438==   total heap usage: 1 allocs, 1 frees, 72,704 bytes allocated
==23438== 
==23438== All heap blocks were freed -- no leaks are possible
==23438== 
==23438== For lists of detected and suppressed errors, rerun with: -s
==23438== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/dhimitri/2020au342c-p1-library-dhimitrimano/2020au342c-p2-timespan-dhimitrimano/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        22       0 100.00%
test2()                           1       0 100.00%        15       0 100.00%
test3()                           1       0 100.00%        10       0 100.00%
test4()                           1       0 100.00%        56       0 100.00%
main                              1       0 100.00%         8       0 100.00%
-----------------------------------------------------------------------------
TOTAL                             5       0 100.00%       111       0 100.00%

File '/home/NETID/dhimitri/2020au342c-p1-library-dhimitrimano/2020au342c-p2-timespan-dhimitrimano/timespan.cpp':
Name                                               Regions    Miss   Cover     Lines    Miss   Cover
----------------------------------------------------------------------------------------------------
operator<<(std::ostream&, TimeSpan const&)               7       0 100.00%        15       0 100.00%
TimeSpan::TimeSpan(double, double, double)               6       0 100.00%        18       0 100.00%
TimeSpan::reConstructSelf(int)                           3       0 100.00%        11       0 100.00%
TimeSpan::deConstructHelp(TimeSpan const&) const         4       0 100.00%         6       0 100.00%
TimeSpan::deConstructSelf() const                        4       0 100.00%         6       0 100.00%
TimeSpan::getHour() const                                1       0 100.00%         1       0 100.00%
TimeSpan::getMinute() const                              1       0 100.00%         1       0 100.00%
TimeSpan::getSecond() const                              1       0 100.00%         1       0 100.00%
TimeSpan::isPositive() const                             1       0 100.00%         1       0 100.00%
TimeSpan::operator+(TimeSpan const&) const               1       0 100.00%         4       0 100.00%
TimeSpan::operator-(TimeSpan const&) const               1       0 100.00%         4       0 100.00%
TimeSpan::operator*(unsigned int) const                  1       0 100.00%         4       0 100.00%
TimeSpan::operator+=(TimeSpan const&)                    1       0 100.00%         4       0 100.00%
TimeSpan::operator-=(TimeSpan const&)                    1       0 100.00%         4       0 100.00%
TimeSpan::operator*=(unsigned int)                       1       0 100.00%         4       0 100.00%
TimeSpan::operator==(TimeSpan const&) const              1       0 100.00%         3       0 100.00%
TimeSpan::operator!=(TimeSpan const&) const              1       0 100.00%         3       0 100.00%
TimeSpan::operator<(TimeSpan const&) const               1       0 100.00%         3       0 100.00%
TimeSpan::operator>(TimeSpan const&) const               1       0 100.00%         3       0 100.00%
TimeSpan::operator<=(TimeSpan const&) const              1       0 100.00%         3       0 100.00%
TimeSpan::operator>=(TimeSpan const&) const              1       0 100.00%         3       0 100.00%
----------------------------------------------------------------------------------------------------
TOTAL                                                   40       0 100.00%       102       0 100.00%
/home/NETID/dhimitri/2020au342c-p1-library-dhimitrimano/2020au342c-p2-timespan-dhimitrimano/main.cpp:
    1|       |#include <cassert>
    2|       |#include <iostream>
    3|       |#include <sstream>
    4|       |
    5|       |#include "timespan.h"
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// testing constructor
   10|      1|void test1() {
   11|      1|  TimeSpan ts(1, 20, 30);
   12|      1|  stringstream ss;
   13|      1|  ss << ts;
   14|      1|  assert(ss.str() == "1:20:30");
   15|      1|
   16|      1|  TimeSpan ts2(4, -20, -90);
   17|      1|  ss.str("");
   18|      1|  ss << ts2;
   19|      1|  assert(ss.str() == "3:38:30");
   20|      1|
   21|      1|  TimeSpan ts3(1.5, 30.5, -90);
   22|      1|  ss.str("");
   23|      1|  ss << ts3;
   24|      1|  assert(ss.str() == "1:59:00");
   25|      1|
   26|      1|  TimeSpan ts4(0, 0.07, 0);
   27|      1|  ss.str("");
   28|      1|  ss << ts4;
   29|      1|  assert(ss.str() == "0:00:04");
   30|      1|  cout << "test1 complete" << endl;
   31|      1|}
   32|       |
   33|       |// testing equality, addition, subtraction, multiplication
   34|      1|void test2() {
   35|      1|  TimeSpan ts(1, 20, 30);
   36|      1|  TimeSpan ts2(1, 20, 30);
   37|      1|  TimeSpan ts3(0, 0, 0);
   38|      1|  assert(ts == ts2);
   39|      1|  assert(!(ts != ts2));
   40|      1|  assert(ts != ts3);
   41|      1|  assert((ts + ts + ts) == (ts2 * 3));
   42|      1|  assert((ts * 5) == (ts2 * 4) + ts2);
   43|      1|  assert((ts * 5) == (ts2 * 6) - ts2);
   44|      1|  assert((ts + ts - ts) == ((ts2 * 2) - ts));
   45|      1|  assert((ts - ts2) == ts3);
   46|      1|  assert((ts3 * 5) == ts3);
   47|      1|  cout << "test2 complete" << endl;
   48|      1|}
   49|       |
   50|      1|void test3() {
   51|      1|  TimeSpan ts0(0, 0, 0);
   52|      1|  TimeSpan ts1(0, 0, 10);
   53|      1|  TimeSpan ts2 = ts0 - ts1;
   54|      1|  assert(ts1.isPositive() && !ts2.isPositive());
   55|      1|  stringstream ss;
   56|      1|  ss << ts2;
   57|      1|  assert(ss.str() == "-0:00:10");
   58|      1|  cout << "test3 complete" << endl;
   59|      1|}
   60|       |
   61|      1|void test4() {
   62|      1|  TimeSpan ts1(10, 20, 30);
   63|      1|  TimeSpan ts2(40, 50, 60);
   64|      1|  TimeSpan ts3(51, 11, 30);
   65|      1|  assert(ts1 < ts2);
   66|      1|  assert(ts3 > ts1);
   67|      1|  assert(ts2 <= ts2);
   68|      1|  assert(ts2 <= ts3);
   69|      1|  assert(ts3 >= ts3);
   70|      1|  assert(ts3 >= ts2);
   71|      1|  ts1 += ts2;
   72|      1|  stringstream ss;
   73|      1|  ss << ts1;
   74|      1|  assert(ts1 == ts3);
   75|      1|  ts3 -= ts2;
   76|      1|  assert(ts3 != ts1);
   77|      1|  TimeSpan ts4(0, -2, -3);
   78|      1|  TimeSpan ts5(0, -2, -4);
   79|      1|  TimeSpan ts6(0, 2, -3);
   80|      1|  assert(ts4 != ts5);
   81|      1|  assert(ts4 != ts6);
   82|      1|  ss.str("");
   83|      1|  ss << ts4;
   84|      1|  assert(ss.str() == "-0:02:03");
   85|      1|  ss.str("");
   86|      1|  ss << ts6;
   87|      1|  assert(ss.str() == "0:01:57");
   88|      1|  ts4 += ts5;
   89|      1|  ts6 += ts4;
   90|      1|  assert(ts6 >= ts4);
   91|      1|  TimeSpan ts7(-1.5, 10, -93);
   92|      1|  ss.str("");
   93|      1|  ss << ts7;
   94|      1|  assert(ss.str() == "-1:21:33");
   95|      1|  TimeSpan ts8(1.5, -10, 93.4);
   96|      1|  ts2 = ts4;
   97|      1|  ts4 += ts7;
   98|      1|  ts4 -= ts8;
   99|      1|  assert(ts4 + (ts8 * 2) == ts2);
  100|      1|  ts1 = ts5;
  101|      1|  ts1 *= 7;
  102|      1|  assert(ts1 == (ts5 * 7));
  103|      1|  TimeSpan ts9(0, -3, 0);
  104|      1|  ts9 -= ts9;
  105|      1|  TimeSpan ts0(0, 0, 0);
  106|      1|  assert(ts9 == ts0);
  107|      1|  TimeSpan ts10(0, 0, -60);
  108|      1|  ss.str("");
  109|      1|  ss << ts10;
  110|      1|  assert(ss.str() == "-0:01:00");
  111|      1|  TimeSpan ts11(0, -60);
  112|      1|  ss.str("");
  113|      1|  ss << ts11;
  114|      1|  assert(ss.str() == "-1:00:00");
  115|      1|  cout << "test4 complete" << endl;
  116|      1|}
  117|       |
  118|      1|int main() {
  119|      1|  test1();
  120|      1|  test2();
  121|      1|  test3();
  122|      1|  test4();
  123|      1|  cout << "Done." << std::endl;
  124|      1|  return 0;
  125|      1|}

/home/NETID/dhimitri/2020au342c-p1-library-dhimitrimano/2020au342c-p2-timespan-dhimitrimano/timespan.cpp:
    1|       |//
    2|       |// Created by Yusuf Pisan on 4/2/18.
    3|       |//
    4|       |
    5|       |#include "timespan.h"
    6|       |
    7|       |int hours;
    8|       |int mins;
    9|       |int secs;
   10|       |bool positive;
   11|       |
   12|     11|ostream &operator<<(ostream &out, const TimeSpan &ts) {
   13|     11|  if (!ts.isPositive()) {
   14|      5|    out << "-";
   15|      5|  }
   16|     11|  out << ts.getHour() << ":";
   17|     11|  if (ts.getMinute() < 10) {
   18|      6|    out << 0;
   19|      6|  }
   20|     11|  out << ts.getMinute() << ":";
   21|     11|  if (ts.getSecond() < 10) {
   22|      5|    out << 0;
   23|      5|  }
   24|     11|  out << ts.getSecond();
   25|     11|  return out;
   26|     11|}
   27|       |
   28|       |// explicit TimeSpan(int Hour = 0, int Minute = 0, int Second = 0);
   29|     40|TimeSpan::TimeSpan(double hour, double minute, double second) {
   30|     40|  double doubleTime = (hour * 3600) + (minute * 60) + second;
   31|     40|  positive = doubleTime >= 0;
   32|     40|  if (!positive) {
   33|      9|    doubleTime *= -1;
   34|      9|  }
   35|     40|  if (doubleTime > 0.0) {
   36|     35|    doubleTime += .5;
   37|     35|  } else {
   38|      5|    doubleTime -= .5;
   39|      5|  }
   40|     40|  int intTime = static_cast<int>(doubleTime);
   41|     40|  hours = intTime / 3600;
   42|     40|  intTime -= hours * 3600;
   43|     40|  mins = intTime / 60;
   44|     40|  intTime -= mins * 60;
   45|     40|  secs = intTime;
   46|     40|}
   47|       |
   48|      8|void TimeSpan::reConstructSelf(int intTime) {
   49|      8|  positive = intTime >= 0;
   50|      8|  if (!positive) {
   51|      5|    intTime *= -1;
   52|      5|  }
   53|      8|  hours = intTime / 3600;
   54|      8|  intTime -= hours * 3600;
   55|      8|  mins = intTime / 60;
   56|      8|  intTime -= mins * 60;
   57|      8|  secs = intTime;
   58|      8|}
   59|       |
   60|     40|int TimeSpan::deConstructHelp(const TimeSpan &ts) const {
   61|     40|  if (ts.isPositive()) {
   62|     32|    return (ts.getHour() * 3600) + ts.getMinute() * 60 + ts.getSecond();
   63|     32|  }
   64|      8|  return 0 - ((ts.getHour() * 3600) + ts.getMinute() * 60 + ts.getSecond());
   65|      8|}
   66|       |
   67|     50|int TimeSpan::deConstructSelf() const {
   68|     50|  if (positive) {
   69|     38|    return (hours * 3600) + mins * 60 + secs;
   70|     38|  }
   71|     12|  return 0 - ((hours * 3600) + mins * 60 + secs);
   72|     12|}
   73|       |
   74|       |// hour component
   75|     51|int TimeSpan::getHour() const { return this->hours; }
   76|       |
   77|       |// minute component
   78|     62|int TimeSpan::getMinute() const { return this->mins; }
   79|       |
   80|       |// second component
   81|     62|int TimeSpan::getSecond() const { return this->secs; }
   82|       |
   83|       |// true if timespan is 0 or larger
   84|     53|bool TimeSpan::isPositive() const { return this->positive; }
   85|       |
   86|       |// add
   87|      5|TimeSpan TimeSpan::operator+(const TimeSpan &ts) const {
   88|      5|  TimeSpan tsSum(0, 0, deConstructSelf() + deConstructHelp(ts));
   89|      5|  return tsSum;
   90|      5|}
   91|       |
   92|       |// subtract
   93|      5|TimeSpan TimeSpan::operator-(const TimeSpan &ts) const {
   94|      5|  TimeSpan tsSub(0, 0, deConstructSelf() - deConstructHelp(ts));
   95|      5|  return tsSub;
   96|      5|}
   97|       |
   98|       |// multiply with an integer
   99|      9|TimeSpan TimeSpan::operator*(unsigned int number) const {
  100|      9|  TimeSpan tsLarg(0, 0, deConstructSelf() * static_cast<int>(number));
  101|      9|  return tsLarg;
  102|      9|}
  103|       |
  104|      4|TimeSpan TimeSpan::operator+=(const TimeSpan &ts) {
  105|      4|  reConstructSelf(deConstructSelf() + deConstructHelp(ts));
  106|      4|  return *this;
  107|      4|}
  108|       |
  109|      3|TimeSpan TimeSpan::operator-=(const TimeSpan &ts) {
  110|      3|  reConstructSelf(deConstructSelf() - deConstructHelp(ts));
  111|      3|  return *this;
  112|      3|}
  113|       |
  114|      1|TimeSpan TimeSpan::operator*=(unsigned int number) {
  115|      1|  reConstructSelf(deConstructSelf() * number);
  116|      1|  return *this;
  117|      1|}
  118|       |
  119|       |// equality ==
  120|     11|bool TimeSpan::operator==(const TimeSpan &ts) const {
  121|     11|  return deConstructSelf() == deConstructHelp(ts);
  122|     11|}
  123|       |
  124|       |// inequality !=
  125|      5|bool TimeSpan::operator!=(const TimeSpan &ts) const {
  126|      5|  return deConstructSelf() != deConstructHelp(ts);
  127|      5|}
  128|       |
  129|      1|bool TimeSpan::operator<(const TimeSpan &ts) const {
  130|      1|  return deConstructSelf() < deConstructHelp(ts);
  131|      1|}
  132|       |
  133|      1|bool TimeSpan::operator>(const TimeSpan &ts) const {
  134|      1|  return deConstructSelf() > deConstructHelp(ts);
  135|      1|}
  136|       |
  137|      2|bool TimeSpan::operator<=(const TimeSpan &ts) const {
  138|      2|  return deConstructSelf() <= deConstructHelp(ts);
  139|      2|}
  140|       |
  141|      3|bool TimeSpan::operator>=(const TimeSpan &ts) const {
  142|      3|  return deConstructSelf() >= deConstructHelp(ts);
  143|      3|}

Sun Oct 25 12:12:54 PDT 2020
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
